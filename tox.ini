[tox]
requires =
    tox>=4.2
env_list =
    fix
    3.13
    3.12
    3.11
    3.10
    type
    readme
skip_missing_interpreters = true

[testenv]
description = run the unit tests with pytest under {basepython}
package = wheel
wheel_build_env = .pkg
extras =
    test
set_env =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    COVERAGE_PROCESS_START = {toxinidir}/setup.cfg
    _COVERAGE_SRC = {envsitepackagesdir}/sphinx_argparse_cli
commands =
    pytest {tty:--color=yes} {posargs: \
      --junitxml {toxworkdir}{/}junit.{envname}.xml --cov {envsitepackagesdir}{/}sphinx_argparse_cli \
      --cov {toxinidir}{/}tests --cov-fail-under=100 \
      --cov-config=pyproject.toml --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      tests}

[testenv:fix]
description = run static analysis and style check using flake8
skip_install = true
deps =
    pre-commit>=3.8
pass_env =
    HOMEPATH
    PROGRAMDATA
commands =
    pre-commit run --all-files --show-diff-on-failure
    python -c 'print("hint: run {envdir}/bin/pre-commit install to add checks as pre-commit hook")'

[testenv:type]
description = run type check on code base
deps =
    mypy==1.11.2
    types-docutils>=0.21.0.20240907
commands =
    mypy src
    mypy tests

[testenv:readme]
description = check that the long description is valid
skip_install = true
deps =
    build[uv]>=1.2.2
    check-wheel-contents>=0.6
    twine>=5.1.1
commands =
    pyproject-build --installer uv --outdir {envtmpdir} --sdist --wheel .
    twine check {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:dev]
description = generate a DEV environment
package = editable
extras =
    docs
    test
commands =
    uv pip tree
    python -c 'import sys; print(sys.executable)'
